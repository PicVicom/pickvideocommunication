@page "/chat"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject SignOutSessionStateManager SignOutManager

@implements IAsyncDisposable

<div class="form-group">
    <label>
        @UserId >>
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">전송</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code { 
    [Parameter]
    public int RoomID { get; set; }

    [Parameter]
    public string UserId { get; set; }

    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;


    #region 채팅
    Task Send() =>
        hubConnection.SendAsync("SendMessage", UserId, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
    #endregion


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

}