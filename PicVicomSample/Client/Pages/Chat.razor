@page "/chat"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject SignOutSessionStateManager SignOutManager

@implements IAsyncDisposable

<div class="form-group">
    <label>
        닉네임: @UserId
    </label>
</div>
<div class="form-group">
    <label>
        채팅:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">전송</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code { private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string UserId;
    private string messageInput;

    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserId = user.Identity.Name;
            _claims = user.Claims;
        }
    }

    #region 채팅
    Task Send() =>
hubConnection.SendAsync("SendMessage", UserId, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
    #endregion


    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

}